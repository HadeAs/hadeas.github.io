---
import TableOfContentsHeading from "./TableOfContentsHeading.astro";

const { headings } = Astro.props;
const toc = buildToc(headings);

function buildToc(headings) {
  const toc = [];
  const parentHeadings = new Map();
  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });
  return toc;
}
---

<nav class="toc">
  <ul>
    {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
  </ul>
  <svg
    class="toc-marker"
    width="200"
    height="200"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      stroke="#444"
      stroke-width="3"
      fill="transparent"
      stroke-dasharray="0, 0, 0, 1000"
      stroke-linecap="round"
      stroke-linejoin="round"
      transform="translate(-0.5, -0.5)"></path>
  </svg>
</nav>
<script>
  var toc = document.querySelector(".toc");
  var tocPath = document.querySelector(".toc-marker path");
  var tocItems;

  var pathLength;

  var lastPathStart, lastPathEnd;

  window.addEventListener("resize", drawPath, false);
  window.addEventListener("scroll", sync, false);

  drawPath();

  function drawPath() {
    tocItems = [].slice.call(toc.querySelectorAll("li"));

    // Cache element references and measurements
    tocItems = tocItems.map(function (item) {
      var anchor = item.querySelector("a");
      // var target = document.getElementById(
      //   anchor.getAttribute("href").slice(1)
      // )?.parentNode;
      var target = document.getElementById(
        anchor.getAttribute("href").slice(1)
      );

      return {
        listItem: item,
        anchor: anchor,
        target: target,
      };
    });

    // Remove missing targets
    tocItems = tocItems.filter(function (item) {
      return !!item.target;
    });

    var path = [];
    var pathIndent;

    tocItems.forEach(function (item, i) {
      var x = item.anchor.offsetLeft - 5,
        y = item.anchor.offsetTop,
        height = item.anchor.offsetHeight;

      if (i === 0) {
        path.push("M", x, y, "L", x, y + height);
        item.pathStart = 0;
      } else {
        // Draw an additional line when there's a change in
        // indent levels
        if (pathIndent !== x) path.push("L", pathIndent, y);

        path.push("L", x, y);

        // Set the current path so that we can measure it
        tocPath.setAttribute("d", path.join(" "));
        item.pathStart = tocPath.getTotalLength() || 0;

        path.push("L", x, y + height);
      }

      pathIndent = x;

      tocPath.setAttribute("d", path.join(" "));
      item.pathEnd = tocPath.getTotalLength();
    });

    pathLength = tocPath.getTotalLength();

    sync();
  }

  function sync() {
    var windowHeight = window.innerHeight;

    var pathStart = pathLength,
      pathEnd = 0;

    var visibleItems = 0;
    for (let i = 0; i < tocItems.length; i++) {
      const item = tocItems[i];
      const currentBounds = item.target.getBoundingClientRect();
      let lastElement;
      if (i !== tocItems.length - 1) {
        lastElement = tocItems[i + 1].target.previousElementSibling;
      } else {
        lastElement = item.target.parentElement.lastElementChild;
      }
      const lastBounds = lastElement.getBoundingClientRect();
      if (
        (currentBounds.bottom > 0 && currentBounds.top < windowHeight) ||
        (lastBounds && currentBounds.bottom < 0 && lastBounds.bottom > 0)
      ) {
        pathStart = Math.min(item.pathStart, pathStart);
        pathEnd = Math.max(item.pathEnd, pathEnd);

        visibleItems += 1;

        item.listItem.classList.add("visible");
      } else {
        item.listItem.classList.remove("visible");
      }
    }

    // Specify the visible path or hide the path altogether
    // if there are no visible items
    if (visibleItems > 0 && pathStart < pathEnd) {
      if (pathStart !== lastPathStart || pathEnd !== lastPathEnd) {
        tocPath.setAttribute("stroke-dashoffset", "1");
        tocPath.setAttribute(
          "stroke-dasharray",
          "1, " + pathStart + ", " + (pathEnd - pathStart) + ", " + pathLength
        );
        tocPath.setAttribute("opacity", 1);
      }
    } else {
      tocPath.setAttribute("opacity", 0);
    }

    lastPathStart = pathStart;
    lastPathEnd = pathEnd;
  }
</script>
<style>
  .toc {
    position: fixed;
    right: -1em;
    top: 7em;
    padding: 1em;
    width: 14em;
    line-height: 2;
  }
  .toc ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  .toc-marker {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
  .toc-marker path {
    transition: all 0.3s ease;
  }
</style>
