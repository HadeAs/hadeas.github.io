<button aria-label="Toggle Dark Mode">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 20 20"
    fill="currentColor"
    class="text-gray-900 dark:text-gray-100 h-6 w-6"
  >
    <path
      class="sun hidden"
      fillRule="evenodd"
      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
      clipRule="evenodd"></path>
    <path
      class="moon"
      d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
    ></path>
  </svg>
</button>

<script>
  // import {SITE_METADATA} from "../consts";

  globalThis.isThemeSwitherInitialized = false;

  if (!globalThis.isThemeSwitherInitialized) {
    // Detect system preference change
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        setTheme(event.matches ? "dark" : "light");
      });

    // Set theme
    function setTheme(newTheme, flag) {
      localStorage.setItem("theme", newTheme);
      if (!flag) {
        document.documentElement.classList.remove("dark", "light");
        document.documentElement.classList.add(newTheme);
      }
      document
        .querySelector('button[aria-label="Toggle Dark Mode"] .sun')
        .classList.toggle("hidden", newTheme !== "dark");
      document
        .querySelector('button[aria-label="Toggle Dark Mode"] .moon')
        .classList.toggle("hidden", newTheme !== "light");
    }

    // Toggle theme
    function toggleTheme(event: MouseEvent) {
      const currentTheme = localStorage.getItem("theme");
      const newTheme = currentTheme === "dark" ? "light" : "dark";
      const x = event?.clientX ?? 0;
      const y = event?.clientY ?? 0;
      const endRadius = Math.hypot(
        Math.max(x, innerWidth - x),
        Math.max(y, innerHeight - y)
      );
      let isDark: boolean;

      // @ts-ignore
      const transition = document.startViewTransition(() => {
        const root = document.documentElement;
        isDark = root.classList.contains("dark");
        root.classList.remove("dark", "light");
        root.classList.add(newTheme);
      });

      transition.ready.then(() => {
        const clipPath = [
          `circle(0px at ${x}px ${y}px)`,
          `circle(${endRadius}px at ${x}px ${y}px)`,
        ];
        document.documentElement.animate(
          {
            clipPath: isDark ? [...clipPath].reverse() : clipPath,
          },
          {
            duration: 500,
            easing: "ease-in",
            pseudoElement: isDark
              ? "::view-transition-old(root)"
              : "::view-transition-new(root)",
          }
        );
      });
      setTheme(newTheme, true);
    }

    // Detect system preference
    if (!localStorage.getItem("theme")) {
      let isDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      // if (SITE_METADATA.theme !== 'system') {
      //     isDark = SITE_METADATA.theme === 'dark'
      // }
      setTheme(isDark ? "dark" : "light");
    }

    // Set initial theme
    setTheme(localStorage.getItem("theme"));

    // Add event listener
    document
      .querySelector('button[aria-label="Toggle Dark Mode"]')
      .addEventListener("click", toggleTheme);
    globalThis.isThemeSwitherInitialized = true;
  }

  document.addEventListener("astro:after-swap", () => {
    document
      .querySelector('button[aria-label="Toggle Dark Mode"]')
      .addEventListener("click", toggleTheme);
    setTheme(localStorage.getItem("theme"));
  });
</script>
